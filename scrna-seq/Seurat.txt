rm(list = ls())
#BiocManager::install("Seurat")
#devtools::install_github("ropenscilabs/umapr")
library(umapr)
library(Seurat)
library(Matrix)
library(ggplot2)
library(gplots)
library(tidyverse)
library(dplyr)
library(patchwork)
setwd("./")


data_directory <- "./sample345/outs/filtered_feature_bc_matrix"

save_path1 <- "./images/vlnplot/"
save_path2 <- "./images/bytsne/"
save_path3 <- "./images/byumap/"
save_path4 <- "./images/DotPlot/"
# 确保目录存在，如果不存在则创建
if (!file.exists(save_path1)) {
  dir.create(save_path1, recursive = TRUE)
}
if (!file.exists(save_path2)) {
  dir.create(save_path2, recursive = TRUE)
}
if (!file.exists(save_path3)) {
  dir.create(save_path3, recursive = TRUE)
}
if (!file.exists(save_path4)) {
  dir.create(save_path4, recursive = TRUE)
}

dir.create("./images/pics", recursive = TRUE)
dir.create('./images/marker', recursive = TRUE)


min_cell=3       #最小细胞数 保证基因 至少在多少个细胞中表达才会被保留
min_feature=300 #最小基因数这个细胞至少表达多少个基因才能够被保留
max_feature=7000 #最大基因数
mt_precent=10 #线粒体含量百分比
count_RNA=100000 #细胞数
scale_fliter=10000 #放大倍数
nfeatures=2000 #高变基因筛选阈值
num_cliuster=1:13 #聚类范围
resolution=0.5 #聚类分辨率

data <- Read10X(data_directory)
#print(data) 

# 创建一个 Seurat 对象
scRNA <- CreateSeuratObject(counts = data, 
                            project = "myproject", 
                            min.cells = min_cell, 
                            min.features = min_feature)

#查看样本的细胞数量
table(scRNA@meta.data$orig.ident)  

#计算线粒体RNA含量
scRNA[[]]
scRNA[["percent.mt"]] <- PercentageFeatureSet(scRNA, pattern = "^MT-")#小鼠的^MT- 换成小写 ^mt

#可视化线粒体基因占比
col.num <- length(levels(scRNA@active.ident))
violin  <- VlnPlot(scRNA,
                  features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), 
                  cols =rainbow(col.num), 
                  pt.size = 0.01, #不需要显示点，可以设置pt.size = 0
                  ncol = 4) + 
  theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) 
#violin

#保存这个图 1.nFeature_RNA：每个barcode中检测到的基因数目 2.nCount_RNA:每个barcode当中识别到的RNA数量
#3.percent.mt：线粒体RNA的比例，线粒体RNA含量过高意味着细胞的细胞核不太活跃，正常的胞质RNA含量下降，可能有两种
#情况 1.细胞活性不太好可能已经死了，这种细胞不能下游分析需要过滤掉。 2.线粒体含量本身就很高，需要根据研究对象来过滤
ggsave("./images/pics/plot_before_qc.jpg", plot = violin, width = 12, 
       height = 6,dpi=300) 

###这几个指标之间的 相关性。 把图画到画板上，然后手动保存
plot1=FeatureScatter(scRNA, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2=FeatureScatter(scRNA, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
pearplot <- CombinePlots(plots = list(plot1, plot2), nrow=1, legend="none") 
#pearplot
#保存一下这个图
ggsave("./images/pics/plot_to_qc.jpg", plot = pearplot, 
       width = 12, height = 6,dpi=300) 

#根据pearplot，来做质控---剔除离异值，线粒体mt含量10% 15% 20%都可

scRNA1 <- subset(scRNA, subset = nFeature_RNA > min_feature & nFeature_RNA < max_feature & percent.mt < mt_precent & nCount_RNA < count_RNA)


# 数据标准化，过滤完之后 我们就要对数据进行均一化，使用NormalizeData这个函数，scale.factor表示放大倍数 相当于TPM
scRNA1  <- NormalizeData(scRNA1 , normalization.method = "LogNormalize", scale.factor = scale_fliter)

#####质控结束


# 找到高变异性基因（高表达基因），官方推荐是2000个高变基因，用于下面的PCA UMAP 的数据也可以设置30000
scRNA1 <- FindVariableFeatures(scRNA1, selection.method = "vst", nfeatures = nfeatures)
#vst方法是一种用于选择具有变异性的高级别变量的方法

# 首先，通过使用局部多项式回归（loess）对log(方差)和log(均值)之间的关系进行拟合。该回归线被用来估计每个特征的期望方差。
# 然后，使用观察到的均值和估计的方差（由拟合的回归线给出）对特征值进行标准化。标准化后，特征的值将根据其所属的期望方差进行调整。
# 标准化后，计算特征的方差。在计算方差之前，可以对标准化值进行截断，限制其最大值（使用clip.max参数）。
# 通过使用vst方法，我们可以选择具有很高变异性的变量，总的来说就是，先标准化，再根据方差判断变异性。
# 这里识别高变基因使用的是Seurat包自带的FindVariableFeatures函数，
# 现在已经有了许多其它方法来探索单细胞数据集的高变基因，如COSG包

# 把top10的高变基因挑选出来，目的是为了作图
top10 <- head(VariableFeatures(scRNA1), 10) 
# 画出来不带标签的高变基因图
plot1 <- VariableFeaturePlot(scRNA1) 
###把top10的基因加到图中
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE, size=2.5) 
plot <- CombinePlots(plots = list(plot1, plot2),legend="bottom") 
#plot
#保存一下这个图
ggsave("./images/pics/plot_average_expression.jpg", plot = plot, 
       width = 12, height = 6,dpi=300) 

#数据标准化（中心化）,内存不够就只对高变基因进行缩放，即scRNA1

# ScaleData 函数的作用是对数据的每个特征（即每个基因）进行缩放，
# 通常是通过减去平均值并除以标准差来实现的。这可以确保不同表达水平的基因在后续分析中具有相同的权重。
# 这理解的不一定对：例子：pbmc <- ScaleData(pbmc, vars.to.regress = "percent.mt")
# ScaleData()函数将使用vars.to.regress参数指定要回归处理的变量，此处为"percent.mt"，
# 即细胞中的MT基因百分比，以消除MT基因的表达量对单细胞数据的影响。

all.genes <- rownames(scRNA1)
scRNA1 <- ScaleData(scRNA1, features = all.genes)
cc.genes
CaseMatch(c(cc.genes$s.genes,cc.genes$g2m.genes),VariableFeatures(scRNA1))

##########################
#细胞周期评分
#g2m_genes = cc.genes$g2m.genes
#g2m_genes = CaseMatch(search = g2m_genes, match = rownames(scRNA1))
#s_genes = cc.genes$s.genes
#s_genes = CaseMatch(search = s_genes, match = rownames(scRNA1))
#scRNA1 <- CellCycleScoring(object=scRNA1,  g2m.features=g2m_genes,  s.features=s_genes)
#查看细胞周期基因对细胞聚类的影响
#scRNAa <- RunPCA(scRNA1, features = c(s_genes, g2m_genes))
#p <- DimPlot(scRNAa, reduction = "pca", group.by = "Phase")
#p
#VlnPlot(scRNAa, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.HB","G2M.Score","S.Score"), ncol = 6)
#ggsave("cellcycle_pca.png", p, width = 8, height = 6)
##如果需要消除细胞周期的影响
#scRNAb <- ScaleData(scRNA1, vars.to.regress = c("S.Score", "G2M.Score"), features = rownames(scRNA1))
###########################


rownames(scRNA1)
#PCA降维并提取主成分
#PCA降维
scRNA1 <- RunPCA(scRNA1, features = VariableFeatures(scRNA1)) 
plot1 <- DimPlot(scRNA1, reduction = "pca", group.by="orig.ident") 
###画图
#plot1 
###ElbowPlot() 可以快速的检查降维的效果
plot2 <- ElbowPlot(scRNA1, ndims=20, reduction="pca") 
scRNA2 <- JackStraw(scRNA1, num.replicate = 100)
scRNA2 <- ScoreJackStraw(scRNA2, dims = 1:20)
scRNA2<-JackStrawPlot(scRNA2, dims = 1:20)
##画图,根据图选择下一步的参数
#plot2
###一般选择拐点作为降维的度数。
plotc <- plot1+plot2
#plotc
#ggsave("pca.pdf", plot = plotc, width = 8, height = 4) 
ggsave("./images/pics/pca.jpg", plot = plotc, width = 8, height = 4,dpi=300)

####
# 输入的X和Y值
X <- c(plot2$data$dims)

Y <- c(plot2$data$stdev)


# 计算相邻点之间的斜率
slopes <- diff(Y) / diff(X)
slopes

end_index <- length(Y)-1


for (i in seq(end_index , 1,by=-1)) {
  if (slopes[i] <= -0.15) {
    end_index <- i+1
    break
  }else{
    print(paste('斜率：',slopes[i],'索引：',i))
  }
}
end_index

turning_point_index <- end_index + 1

# 对应的X值
turning_point_X <- X[turning_point_index]

cat("拐点的X值为:", turning_point_X, "\n")



####

##可以看出大概在PC为13的时候，每个轴是有区分意义的。
num_cliuster=1:turning_point_X
#聚类
scRNA1 <- FindNeighbors(scRNA1, dims = num_cliuster) 

###这个分辨率是可以自定义的，当我们的样本细胞数较大时候resolution 要高一些，一般情况2万细胞以上都是大于1.0的
scRNA1 <- FindClusters(scRNA1, resolution = resolution)

## 查看每一类有多少个细胞
table(scRNA1@meta.data$seurat_clusters)

#取出并保存clusters
metadata <- scRNA1@meta.data
cell_cluster <- data.frame(cell_ID=rownames(metadata), cluster_ID=metadata$seurat_clusters)
write.csv(cell_cluster,'./cell_cluster.csv',row.names = F)



####
#构建一个系统发育树，将每个身份类别的“平均”细胞联系起来. 
#基于在基因表达空间或PCA空间中构建的距离矩阵来估计树
##系统发育分析

scRNA1<-BuildClusterTree(scRNA1)
#plottree <- PlotClusterTree(scRNA1)


#####画图
#可视化降维有两个方法tSNE和UMAP
##非线性降维——这个目的是为了可视化，而不是特征提取（PCA），虽然它也可以用来做特征提取。
#tSNE
scRNA1 = RunTSNE(scRNA1, dims = num_cliuster)#pc.num 看拐点图数值
embed_tsne <- Embeddings(scRNA1, 'tsne')
write.csv(embed_tsne,'embed_tsne.csv')
###label = TRUE把注释展示在图中
plot1 = DimPlot(scRNA1, reduction = "tsne",label = TRUE) 
#画图
#plot1
#保存
ggsave("./images/pics/tSNE.png", plot = plot1, width = 8, height = 7)
##把图片保存一下

#UMAP---第二种可视化降维
scRNA1 <- RunUMAP(scRNA1, dims = num_cliuster)
embed_umap <- Embeddings(scRNA1, 'umap')
write.csv(embed_umap,'embed_umap.csv') 
plot2 = DimPlot(scRNA1, reduction = "umap",label = TRUE) 
#plot2
ggsave("./images/pics/UMAP.png", plot = plot2, width = 8, height = 7)

#合并tSNE与UMAP
#plotc <- plot1+plot2+ plot_layout(guides = 'collect')
#plotc
#ggsave("tSNE_UMAP.png", plot = plotc, width = 10, height = 5)

###############################################
#Marker 基因分析  
#cluster5.markers <- FindMarkers(scRNA1,ident.1= 5,ident.2=c(0,3),min.pct=0.25)
#ident.1是细胞类群1   ident.2细胞类群2  可以选择以下方式寻找所有的marker基因
#可以自动的去找出每一个细胞类型对应的高表达基因 （会分别以每一个类群作为1类类群，剩余的所有作为2类类群）
scRNA1.markers <- FindAllMarkers(scRNA1,only.pos=TRUE,min.pct=0.25,logfc.threshold = 0.25)

top10 <- scRNA1.markers %>% group_by(cluster) %>% top_n(n=10,wt= avg_log2FC)
plot_heat <- DoHeatmap(scRNA1,features= top10$gene) 

ggsave("./images/pics/top10_DoHeatmap.jpg", plot = plot_heat, width = 20, height = 20,dpi=300)



# 将因子转换为数值型向量
cluster_numeric <- as.numeric(as.character(top10$cluster))
# 找到最大值
max_value <- max(cluster_numeric)
min_value <- min(cluster_numeric)






for (i in min_value:max_value){
  selected_value <- top10[top10$cluster == i, "gene"]
  selected_value <- as.character(selected_value$gene)
  
  vln <- VlnPlot(scRNA1,features = selected_value,pt.size = 0,ncol = 4)
  ggsave(file.path(save_path1,paste0(i,"_top10_gene_exp_VlnPlot.jpg")), plot = vln, width = 16, height = 10,dpi=300)
  
  featurep_tsne <- FeaturePlot(scRNA1, features = selected_value,ncol = 4,reduction = "tsne")
  ggsave(file.path(save_path2,paste0(i,"_top10_gene_feature_byTSNE.jpg")), plot = featurep_tsne, width = 16, height = 10,dpi=300)
  
  featurep_umap <- FeaturePlot(scRNA1, features = selected_value,ncol = 4,reduction = "umap")
  ggsave(file.path(save_path3,paste0(i,"_top10_gene_feature_byUMAP.jpg")), plot = featurep_umap, width = 16, height = 10,dpi=300)
  
  dotp <-DotPlot(scRNA1,features=selected_value,group.by='RNA_snn_res.0.5')
  ggsave(file.path(save_path4,paste0(i,"_top10_gene_dotplot.jpg")), plot = dotp, width = 12, height = 8,dpi=300)
}